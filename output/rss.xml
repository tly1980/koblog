<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Demo Site</title><link>http://nikola.ralsina.com.ar</link><description>This is a demo site for Nikola.</description><lastBuildDate>Fri, 16 Aug 2013 15:59:32 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>测试</title><link>http://nikola.ralsina.com.ar/posts/ce-shi.html</link><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><guid>http://nikola.ralsina.com.ar/posts/ce-shi.html</guid><pubDate>Fri, 16 Aug 2013 13:47:02 GMT</pubDate></item><item><title>"又见王家卫，东邪西毒（终极版）"</title><link>http://nikola.ralsina.com.ar/posts/2012-12-30-you-jian-wang-jia-wei-dong-xie-xi-du.html</link><description>&lt;p&gt;一般电影的导演剪辑版本，都会变长，东邪西毒导演剪辑版，反而变短了。梁文道在锵锵说的这句话吊起了我的胃口。&lt;/p&gt;
&lt;p&gt;看惯一般港片或好莱坞大片，看王家卫会不习惯。看一般电影，我们更习惯成为故事的聆听者。所听到故事总是具体的，我们之所以被吸引，通常是因为这个故事很有悬念，导演铺陈得很好，将这个故事叙述得峰回路转，荡气回肠。&lt;/p&gt;
&lt;p&gt;但看王家卫电影，更像是看一个有主题的摄影展。看摄影展，会比较需要观众自发/自主地去产生连结。画面，音乐，是要营造一种氛围。情节，主角的对白，稍稍构成了接引思维或者情绪的导轨。王乐意玩捉迷藏，平铺直叙这种事情永远不会发生的。如果你足够聪明，而又有耐性的话，或许能看懂他的作品。这大概就是有些人很喜欢，以及很不喜欢他的原因。&lt;/p&gt;
&lt;p&gt;这个导演剪辑版，是经过修复的，画面比以前 vcd / dvd 版本好太多。情节通过对白跟旁白推动，叙事性镜头少之又少，但正因为如此，几乎每个镜头都可单独拿出来做一个摄影作品，里头的“麻豆”是黄金时期的张国荣，林青霞，黄家辉。杜可风一定被王家卫赋予了无限自由度，恣意发挥，才有了里头太多精妙绝伦的镜头。光凭这点，都已有值回票价的感觉。&lt;/p&gt;
&lt;p&gt;剧情大家耳熟能详了吧，基本上就是一群被情爱所伤，无比纠结的人，在茫茫荒漠中求解脱的药。&lt;/p&gt;
&lt;p&gt;我主要想探讨的就是洪七跟欧阳锋。&lt;/p&gt;
&lt;p&gt;欧阳锋是穿鞋的，洪七就是一个光脚的。一个穿鞋的，有身份，有阅历，世故的人，并非不会受到伤害（事实上欧阳锋的自我放逐，就是为大嫂耿耿于怀）；一个光脚的，无名小辈，没阅历，愣头青，一定会受到伤害。&lt;/p&gt;
&lt;p&gt;洪七不是一个傻子。一个数钱数得很仔细的人，又如何会做不符合经济学原则的事情：为了一个“鸡蛋”去杀太尉府的人。他要帮鸡蛋妹决不是因为鸡蛋。&lt;/p&gt;
&lt;p&gt;洪七说，他之所以会断一根手指是因为他的刀不如以前快了。他的刀不够快，是犹豫值不值（他知道鸡蛋妹是姜太公钓鱼，明白会一无所获）。他犹豫，是因为欧阳锋的价值观入侵了。放在以前，他不会想值不值的。欧阳锋对于鸡蛋妹，是断然不会帮的。&lt;/p&gt;
&lt;p&gt;洪七付出代价，因为一个“鸡蛋”，断了手指；不过代价也成就了他，若干年后，人们谈论起洪七不会因为那“鸡蛋”，而是他单枪匹马，断了一根手指，灭了一帮太尉府的人。&lt;/p&gt;
&lt;p&gt;即使断一根手指，洪七病重时，鸡蛋妹还是走了；洪七认了，也发现真正不离不弃的是糟糠之妻，不上台面，却可带去闯荡江湖；欧阳锋，最终饮了半坛“醉生梦死”，才发觉那是大嫂开的玩笑；黄药师的失忆，也不是因为坛酒，而是大嫂溘然而逝。&lt;/p&gt;
&lt;p&gt;糙人洪七的药是，认了，放了，我觉得痛快就好了。套用流行的话，这是 EQ 高的表现，他很快 Bounce Back 了。&lt;/p&gt;
&lt;p&gt;对于其他拥有精致灵魂的主角，他们药是什么？ 片中没有给出，反而是英文片名有点启发：&lt;/p&gt;
&lt;p&gt;Ashes of Time。过去种种，已是时间灰烬；今日或明日种种，正成为时间灰烬；剧中人的悲剧之处，是因为没有活在当下而缅怀过去种种。这是一个无可争议的事实，而大概也是人们最容易忽视，最不愿接受的事实。&lt;/p&gt;
&lt;p&gt;认清人世无常，大约是最好的药了。&lt;/p&gt;</description><guid>http://nikola.ralsina.com.ar/posts/2012-12-30-you-jian-wang-jia-wei-dong-xie-xi-du.html</guid><pubDate>Sun, 30 Dec 2012 08:24:00 GMT</pubDate></item><item><title>"Email 与域名的配置 (SPF / DKIM)"</title><link>http://nikola.ralsina.com.ar/posts/2012-12-12-emailyu-yu-ming-de-pei-zhi.html</link><description>&lt;p&gt;长久以来都积压了不少 email 跟域名的疑问。纸上得来终觉浅，最近终于有时间集中将这些东西捋一下，具体实战一下。理清一些思路，有了更好的理解。&lt;/p&gt;
&lt;h4&gt;第一点域名上的 MX 配置主要是用来收信的。&lt;/h4&gt;
&lt;p&gt;譬如某个仁兄(foo@example.com) 要往 abc@keyonly.com 发信，这个仁兄的 MTU（就是 Postfix 或者 Sendmail ）首先向 keyonly.com 的 域名服务器查询 keyonly.com 的 MX 记录。  &lt;br&gt;
譬如查到 MX 记录指向 mail.keyonly.com ，example.com MTU 就会向 mail.keyonly.com 的 MTA 发送 SMTP 请求 （现在流行 ESMTP ）进行投递。&lt;/p&gt;
&lt;p&gt;发 email 第一步解决了，知道信要往哪一个邮局发去，即往收件人的域名地址的 MX 记录上指向的机器发去。  &lt;br&gt;
问题又来了，如何确认发信人的身份呢？&lt;/p&gt;
&lt;h4&gt;通过 SPF 跟 DKIM 确认发信人的身份&lt;/h4&gt;
&lt;p&gt;SMTP 协议允许任何计算机以任何源地址发邮件。因此有很多专门做垃圾邮件的人以伪装邮件的方式来发信。要解决这个问题，还是通过域名。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;SPF 是用于验证发件人地址是否被某个域认可，即 &lt;strong&gt;mailed-by&lt;/strong&gt;；    &lt;/li&gt;
&lt;li&gt;DomainKey/DKIM 用来验证邮件内容是否被某个域认可，即 &lt;strong&gt;signed-by&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h4&gt;1.) SPF&lt;/h4&gt;
&lt;p&gt;SPF 实质是通过域名服务器向外中提供一个 Outbound MTA 白名单列表。&lt;/p&gt;
&lt;p&gt;举一具体例子。&lt;/p&gt;
&lt;p&gt;这些信息可以通过 dig 命令获取。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;dig&lt;/span&gt; &lt;span class="n"&gt;TXT&lt;/span&gt; &lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;ANSWER&lt;/span&gt; &lt;span class="n"&gt;SECTION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;        &lt;span class="mi"&gt;86360&lt;/span&gt;   &lt;span class="n"&gt;IN&lt;/span&gt;  &lt;span class="n"&gt;TXT&lt;/span&gt; &lt;span class="s"&gt;"v=spf1 include:_spf.google.com ~all"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是 keyonly.com 的配置，相对简单，仅仅允许 _spf.google.com，其他都会 softfail 掉 (~all)。 
如果配置为：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="n"&gt;ANSWER&lt;/span&gt; &lt;span class="n"&gt;SECTION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;        &lt;span class="mi"&gt;86360&lt;/span&gt;   &lt;span class="n"&gt;IN&lt;/span&gt;  &lt;span class="n"&gt;TXT&lt;/span&gt; &lt;span class="s"&gt;"v=spf1 a mx include:_spf.google.com include:sendgrid.net ~all"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是还允许 keyonly.com 的所有 a 记录跟 mx 记录，_spf.google.com 和 sendgrid.net 。&lt;/p&gt;
&lt;p&gt;spf 配置，可以很灵活，很强大，详细请看这里：
http://www.openspf.org/SPF_Record_Syntax&lt;/p&gt;
&lt;h4&gt;2.) DKIM&lt;/h4&gt;
&lt;p&gt;DKIM 跟 DomainKey 有点大同小异，都是在 MTA （注意，这个是 Outbound MTA）发信时，对邮件进行签名。私钥由 Outbound MTA 保管着，不对外公开，公钥就放在域名的 TXT 项目上。接收方要验证信息的签名，可根据邮件上提供的信息，构造出含有公钥信息的域名地址，去该地址获取公钥。&lt;/p&gt;
&lt;p&gt;对据说 DomainKey 是 Yahoo 发明的，是 DKIM 前身。貌似 DKIM 更强大，更流行。具体那个地方强大，请自己狗一下。而 Google app 也支持 DKIM。&lt;/p&gt;
&lt;p&gt;注意，是签名，而不是加密。签名就是暗示着对邮件体的 Digest 通过私钥进行加密。Inbound MTA 在接收时候，就会从发件人域名服务器上查到公钥信息，然后对签名信息进行解密。如果解密得出的 Digest 值跟计算出来的一致，那证明邮件的合法性。&lt;/p&gt;
&lt;p&gt;譬如我有某个从 keyonly.com 发出来的 email，其 DKIM 签名如下：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;DKIM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Signature&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;relaxed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;relaxed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;originating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;
         &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;EVanec6ZKH&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vkbb95pMLG07OuPp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;QtQ3z71oXKCTejw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;E02Fj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ROj18sLVc395zPdCTRu1L8Gsie63QG&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tF4PoeS7z3Yzvn7m2zWArjQfaVN51&lt;/span&gt;
         &lt;span class="n"&gt;hSLE7jXRm1S5y4uaZboO2jRy9stCeikZ5xs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="n"&gt;MrDZGh8IlkrUHySouHeqmdh5epwugT&lt;/span&gt;
         &lt;span class="n"&gt;riTKjLMUF9t4YNO75i14mptgphw&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;VNP2tjTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;d=keyonly.com; s=google
重新构造出 DKIM 信息的域名：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;._domainkey.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_domainkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以我们可以通过 dig 获取 这个 DKIM 的公钥：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;dig&lt;/span&gt; &lt;span class="n"&gt;TXT&lt;/span&gt; &lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_domainkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_domainkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt; &lt;span class="n"&gt;TXT&lt;/span&gt; &lt;span class="s"&gt;"v=DKIM1\; k=rsa\; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCF33Yl1sVLxLcS5UYUDdctOv2pdbaiYm1FRdSFzjvtO1b05zeXMJWKzXpGqpqh3i9sNNosrfmGKjjp/v+mklihVJUv7gRy/SyHg1WI8zRZNGfBtS0rE4s+jGeqtI2B2s4anJ0fcsps7N0kYjArBPCrv7LspPnCnHn6bggJZXjsGwIDAQAB"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个域名上允许多个 DKIM 公钥。因为 DKIM 签名上的 s 项只要不重复就好了，所以我们完全可以有&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;google._domain.keyonly.com  =&amp;gt; google app 的 dkim&lt;/li&gt;
&lt;li&gt;sendgrid._domain.keyonly.com =&amp;gt; sendgrid 的 dkim&lt;/li&gt;
&lt;li&gt;postfix._domain.keyonly.com  =&amp;gt; 我的 postfix 的 dkim&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;3）SPF 跟 DKIM 的结合使用&lt;/h4&gt;
&lt;p&gt;SPF 跟 DKIM 完全可以绑定到不同域名上。譬如说，从 keyonly.com 发出来的 email 不用必须是用 keyonly.com 签名的，完全可以是其他域名签名的。&lt;/p&gt;
&lt;p&gt;譬如说，我收到 NAB 银行的 email 签名的就是 Ubank (Ubank 是 NAB 的一个子银行)。感觉是他们    共用某些 IT 构架所导致的。&lt;/p&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;配置的时候牵涉到 DNS 设置，可以通过 dig 命令来获取 DNS 信息。  &lt;/li&gt;
&lt;li&gt;而 gmail 允许的一些特性会另调试变得简单：&lt;ul&gt;&lt;li&gt;signed by, mailed by （对着收件人按右键）。&lt;/li&gt;
&lt;li&gt;show original 会显示邮件的原始信息。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一般大的 email 服务器会要求 SPF / DKIM 至少有一样；否则被 SPAM 几率就会增加。&lt;/p&gt;
&lt;p&gt;实际上有很多大公司大机构，都不一定将这个问题处理得很好。譬如 NAB （National Australia Bank） 的 email 就连 SPF 都没有设置，虽然有设置 DKIM，但却用的是自己子银行 Ubank 的。严格来说，这不是一个金融公司专业的 IT 表现。实际上 NAB 前段还专门发信通知大家小心被钓鱼邮件骗。如果它能一早就做好 SPF / DKIM ，应该可以提高犯罪分子的作案难度，减少出现问题的机会。&lt;/p&gt;
&lt;p&gt;而这点 CBA 就比 NAB 做得好多了，SPF / DKIM 都正确设置了，感觉比较专业。&lt;/p&gt;</description><guid>http://nikola.ralsina.com.ar/posts/2012-12-12-emailyu-yu-ming-de-pei-zhi.html</guid><pubDate>Wed, 12 Dec 2012 21:30:00 GMT</pubDate></item><item><title>"Django Admin 的性能优化一"</title><link>http://nikola.ralsina.com.ar/posts/2012-12-01-django-admin-performance-optimization-1.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Django Admin 让程序猿不写太多代码就生产一功能基本齐备的后端，确实是很好很强大的。但很好很强大的工具也通常比较笨，会有多余操作，导致性能不大好。优化本来应针对业务，尽量不要去碰后台管理的优化，除非真的很闲。
然而，Admin 真的是慢得让开发人员也无法忍受，一个页面产生500条语句，耗时十几秒，所以忍不住要去改改。在某些项目，Admin 页面就是产品的正式后端管理工具，那部分是有企业客户用的。如果想顺利收到钱，不想被xxoo的话，也有优化 Admin 的需要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;问题：List 页面当使用到外键产生过多的查询&lt;/h3&gt;
&lt;p&gt;select_related 可以设置为 True。 因为 Django ORM 默认是 Lazy Load 的，通常外键的属性不会在产生 List 结果的 QuerySet 里头被装载，而要等到你调用其属性了才会装载。
譬如有一个 Model 叫 Blog，有一个外键 Author。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Charfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Charfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Charfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Charfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;author_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后你希望在 Admin list 里头见到 Author 通常这么做：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author_name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个时候，如果调用 Admin 的 Blog 的 list page 通常产生 100 条以上查询语句。因为 author_name 方法会引用到外键`对象 author ，而 Admin list 分页默认是 100 条记录为一个分页。
100 条查询语句，现在的机器那么牛，实在不能算什么。而如果你有 n 个外键需要被显示，就会产 n * 100 条语句，而且他们都是串行执行的，因为是 Lazy 装载，而在 Template 里头是逐个被显示出来。。。&lt;/p&gt;
&lt;p&gt;解决办法就是让 BlogAdmin 在产生 queryset 的时候对外键 Author 产生 JOIN 。
注意，上面的代码里，Blog.author 这个field 因为没设置 null=True，因此会产生 INNER JOIN，反之产生 LEFT OUTER JOIN，因为 author 可为空。&lt;/p&gt;
&lt;h3&gt;解决：办法有二&lt;/h3&gt;
&lt;p&gt;1). 修改 BlogAdmin 的 select_related 开关。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;select_related&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author_name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个办法的好处就是简单，缺点是不够灵活。因为这个会把 Blog 所有的外键都 JOIN 进来，不管他们是否在 list_display 里头设置了。&lt;/p&gt;
&lt;p&gt;2). 重载 Admin 的 queryset 方法。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author_name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlogAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此你可以显式指定那些外键需要被重载。不仅如此，select_related 还允许继续将外键的外键级联叠加进来。
譬如：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author__nationality'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的例子是不仅连 author 会 join，连 nationality 也会被 join 。
虽然没有做过实验，但是猜测应该是可以无限级联下去。
因为 author 已经是外键了，所以 select_related 中可以将 author 参数去掉，简写成如下：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'author__nationality'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://nikola.ralsina.com.ar/posts/2012-12-01-django-admin-performance-optimization-1.html</guid><pubDate>Sat, 01 Dec 2012 15:35:00 GMT</pubDate></item><item><title>"Django Admin 的性能优化二"</title><link>http://nikola.ralsina.com.ar/posts/2012-12-01-django-admin-performance-optimization-2.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Django Admin 让程序猿不写太多代码就生产一功能基本齐备的后端，确实是很好很强大的。但很好很强大的工具也通常比较笨，会有多余操作，导致性能不大好。优化本来应针对业务，尽量不要去碰后台管理的优化，除非真的很闲。
然而，Admin 真的是慢得让开发人员也无法忍受，一个页面产生500条语句，耗时十几秒，所以忍不住要去改改。在某些项目，Admin 页面就是产品的正式后端管理工具，那部分是有企业客户用的。如果想顺利收到钱，不想被xxoo的话，也有优化 Admin 的需要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;问题：List 页面当外键需要做聚合查询统计的时候&lt;/h3&gt;
&lt;p&gt;请想象你要做一个电子商务的拍卖，有如下这两个类：
一个 Product 可以有多个 Bid。典型的 1-n 关系，Product 是 Bid 的外键。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bid_count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bid_accepted&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accepted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;accepted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很简单很直观吧。好了，然后你有这样一个 admin，问题就来了 。。。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;display_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bid_count'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bid_accepted'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过 select_related 搞定了其他的外键，但就是 bid_count 搞不定啊，而 bid_count 跟 bid_accepted 每个就引起一次 sql 查询，一个 Admin 的 list 页面 200 条 SQL 呢。  &lt;br&gt;
山穷水复疑无路，柳暗花明又一村。  &lt;br&gt;
重载 Admin 的 queryset 方法，搞定了 bid_count:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;display_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bid_count'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bid_accepted'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlogAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_related&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 这里去搞定其他外键&lt;/span&gt;
        &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bid_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bids&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好的这个 annotate 下去，搞定了 100 条 SQL，结果还剩下 100 条呢，bid_accepted 可以搞定么？？  &lt;br&gt;
所以很自然就想到如下的语句&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bid_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bids__accepted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成的 sql 如下：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid_count&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid_accepted&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; 
         &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;OUTER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
         &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; 
            &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="c1"&gt;-- 懒得写了，反正就是 product 的每一项。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显然，这并非我们想要的，bid_accepted 也丢失了。&lt;/p&gt;
&lt;p&gt;经过一番摸索，我发现了 queryset 还有一个很好很强大的 extra 功能，允许我们嵌入子查询所以将代码改成如下：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s"&gt;'bid_count'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'SELECT COUNT(*) FROM bid &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;        WHERE product.id = bid.product_id and bid.accepted=1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;'bid_accepted'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'SELECT COUNT(*) FROM bid&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s"&gt;        WHERE product.id = bid.submission_id and haggler_bid.accepted=1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成 SQL 如下&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;bid&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid_count&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;bid&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;bid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accepted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;bid_accepted&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
         &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正是鄙人想要的~ :)。&lt;/p&gt;
&lt;p&gt;从 Django Debug Tool 上看到的查询语句数马上降低为 3 条，查询时间也降低到 35ms 内，耗时仅为优化前的 1/10 多一些。&lt;br&gt;
即使这条查询语句含有子查询，但也总比100多200条查询好多了！&lt;/p&gt;
&lt;p&gt;其实这个 extra 完全可以自定制 product 的 model manager 里头，不过项目刚上手，还不是很熟悉，还是先不冒险了。&lt;/p&gt;</description><guid>http://nikola.ralsina.com.ar/posts/2012-12-01-django-admin-performance-optimization-2.html</guid><pubDate>Sat, 01 Dec 2012 15:35:00 GMT</pubDate></item><item><title>"用 Fabric 跟 Cuisine 做自动化发布"</title><link>http://nikola.ralsina.com.ar/posts/2012-11-27-auto-deployment-with-fabric.html</link><description>&lt;p&gt;在招工广告上经常见到提到 DevOps。&lt;br&gt;
我是土人，不晓得是神马玩意儿，狗了一番，度了一把，貌似有点懂了：大概就是自动化部署的意思。&lt;br&gt;
Ops 就是 Operation, Dev 如无意外就是开发。&lt;br&gt;
两个单词加在一起，依据鄙人理解，大概就是把 Operation 这个动作以代码的方式反映出来。  &lt;/p&gt;
&lt;p&gt;最简单的部署，就是一行行敲命令行敲上去。&lt;br&gt;
本人这类菜鸟，都是东抄一行，西抄一行命令那么搞出来的。&lt;br&gt;
人工介入太多的结果是，发布出来的东西可能会不稳定，因为不排除中间漏了东西。而且发布过程可能会有许多错误。&lt;br&gt;
解决办法就是让电脑替我们做事，最初步的方法就是使用部署脚本。比较高级一些，或者说比较专业的做法就是使用 Chef 或者 Puppet 这类的工具去做部署。  &lt;/p&gt;
&lt;p&gt;之前也好奇试了一下 Chef，有感于一个 Chef recipie 实在需要太多文件了。搞不懂用shell都是几行的东西，他能搞 n 个文件夹，n 个文件出来。然后这玩意儿还很火。囧rz...&lt;br&gt;
鉴于本人智商有限，刚刚接触 DevOps 这种东西，还是玩一些 low tech 的东西吧。&lt;br&gt;
DevOps 中，Python 界的&lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt; 也经常被提起。而据说 Instagram 就是用 &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt; 去做的。而有人在这 &lt;a href="http://fabfile.org"&gt;Fabric&lt;/a&gt; 之上做了 &lt;a href="https://github.com/sebastien/cuisine"&gt;Cuisine&lt;/a&gt;，多做一层封装，提供多一些的抽象，简化了某些 API。&lt;/p&gt;
&lt;p&gt;废话少说，奉上代码：  &lt;/p&gt;
&lt;h4&gt;一、配置系统基本环境的代码&lt;/h4&gt;
&lt;p&gt;主要入口是 prepare_system，其中必须的参数是你必须提供 admin_user 用户名。&lt;br&gt;
这段代码会创建一个新的用户，而其属于 admin 组。这个用户会使用你账号下的 DSA public key，以供后来免密码登陆。&lt;/p&gt;
&lt;p&gt;这样你以后就可以把 root 的 ssh 登陆给禁止掉，可以防止别人暴力破解 root 密码。
上面也有配置 iptables 的防火墙代码，从网上抄来的，很小白，请大家不要攻击。。。&lt;/p&gt;
&lt;p&gt;其中也有不少都可以删掉的东西，譬如 prepare_rbenvs, prepare_devenv 。用不到尽管删除掉。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;fab&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="n"&gt;yourhost&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;prepare_system&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_admin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% gist 4151899 %}&lt;/p&gt;
&lt;h4&gt;二、自动生成 Octopress 的博客代码。&lt;/h4&gt;
&lt;p&gt;使用方法很简单。先写好博客，commit&amp;amp;push 后就用调用 fabric 进行部署。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;fab&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="n"&gt;keyonly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;your_user&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.context_managers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cuisine&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dir_exists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_exists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upstart_ensure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;


&lt;span class="n"&gt;site_cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;
&lt;span class="s"&gt;server {&lt;/span&gt;
&lt;span class="s"&gt;    server_name    www.keyonly.com    keyonly.com  keyonly.test;&lt;/span&gt;
&lt;span class="s"&gt;    access_log /var/log/nginx/keyonly.access.log;&lt;/span&gt;
&lt;span class="s"&gt;    index index.html index.htm;&lt;/span&gt;

&lt;span class="s"&gt;    location / {&lt;/span&gt;
&lt;span class="s"&gt;        root /srv/keyonly.com/;&lt;/span&gt;
&lt;span class="s"&gt;        try_files $uri $uri/ /index.html;&lt;/span&gt;
&lt;span class="s"&gt;    }&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;"""&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'~'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dir_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'blogging'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'not exist'&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;'exist'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'~'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dir_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'blogging'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mkdir blogging'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'blogging'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'git clone git://github.com/imathis/octopress.git'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'git clone git://github.com/tly1980/my_blog.git'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'~/blogging/octopress'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'source ~/.bash_profile'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# install the desire ruby version&lt;/span&gt;
            &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bundle install'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'~/blogging/my_blog'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'git pull'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'~/blogging/octopress'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warn_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rm Rakefile _config.yml config.rb source'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ln -s ../my_blog/Rakefile .'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ln -s ../my_blog/_config.yml .'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ln -s ../my_blog/config.rb .'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ln -s ../my_blog/source .'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rake generate'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'~'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;warn_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rm -rvf /srv/keyonly.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cp -r blogging/octopress/public /srv/keyonly.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'chmod -R 0755 /srv/keyonly.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;file_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/etc/nginx/sites-available/keyonly.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site_cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;file_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/etc/nginx/sites-enabled/keyonly.com'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ln -s /etc/nginx/sites-available/keyonly.com /etc/nginx/sites-enabled/keyonly.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;upstart_ensure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'nginx'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://nikola.ralsina.com.ar/posts/2012-11-27-auto-deployment-with-fabric.html</guid><pubDate>Tue, 27 Nov 2012 11:33:00 GMT</pubDate></item><item><title>"第一篇博客"</title><link>http://nikola.ralsina.com.ar/posts/2012-11-27-di-pian-bo-ke.html</link><description>&lt;p&gt;闲置了大半年的 Linode 终于真正用起来了。&lt;br&gt;
最近一直在玩 Vagrant 跟 Fabric 的东西，终于能够做到自动化安装跟发布程序了。
现在可以用 Octopress 写博客了~！！ &lt;/p&gt;
&lt;p&gt;代码高亮还是很不错的说&lt;/p&gt;
&lt;p&gt;python&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"hello, world~!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;javascript&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello, world~!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;coffeescript&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="s"&gt;"hello, world~!"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://nikola.ralsina.com.ar/posts/2012-11-27-di-pian-bo-ke.html</guid><pubDate>Tue, 27 Nov 2012 04:23:00 GMT</pubDate></item></channel></rss>